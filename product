from flask import Flask, request, jsonify
import sqlite3
import threading

app = Flask(_name_)
lock = threading.Lock()  # Lock for synchronization

def init_db():
    conn = sqlite3.connect('ecommerce.db')
    conn.execute('''CREATE TABLE IF NOT EXISTS products
                    (id INTEGER PRIMARY KEY, name TEXT, price REAL, stock INTEGER)''')
    conn.close()

@app.route('/products', methods=['GET', 'POST'])
def manage_products():
    conn = sqlite3.connect('ecommerce.db')
    if request.method == 'POST':
        data = request.json
        conn.execute("INSERT INTO products (name, price, stock) VALUES (?, ?, ?)",
                     (data['name'], data['price'], data['stock']))
        conn.commit()
        return jsonify({'message': 'Product added'}), 201
    else:
        cursor = conn.execute("SELECT * FROM products")
        products = [{'id': row[0], 'name': row[1], 'price': row[2], 'stock': row[3]} for row in cursor.fetchall()]
        return jsonify(products), 200

@app.route('/buy/<int:product_id>', methods=['POST'])
def buy_product(product_id):
    with lock:  # Synchronization to handle concurrency
        conn = sqlite3.connect('ecommerce.db')
        cursor = conn.execute("SELECT stock FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()
        if product and product[0] > 0:
            conn.execute("UPDATE products SET stock = stock - 1 WHERE id = ?", (product_id,))
            conn.commit()
            return jsonify({'message': 'Product purchased'}), 200
        else:
            return jsonify({'message': 'Out of stock'}), 400

if _name_ == '_main_':
    init_db()
    app.run(debug=True)